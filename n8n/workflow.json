{
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $vars.SUPABASE_URL }}/rest/v1/rpc/search_foods",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query_embedding",
              "value": "={{ $node['Generate Query Embedding'].json.data[0].embedding }}"
            },
            {
              "name": "match_threshold",
              "value": "0.7"
            },
            {
              "name": "match_count",
              "value": "8"
            },
            {
              "name": "min_calories",
              "value": "={{ $node['Parse Query Constraints'].json.constraints.min_calories || null }}"
            },
            {
              "name": "max_calories",
              "value": "={{ $node['Parse Query Constraints'].json.constraints.max_calories || null }}"
            },
            {
              "name": "min_protein",
              "value": "={{ $node['Parse Query Constraints'].json.constraints.min_protein || null }}"
            },
            {
              "name": "max_protein",
              "value": "={{ $node['Parse Query Constraints'].json.constraints.max_protein || null }}"
            },
            {
              "name": "food_category",
              "value": "={{ $node['Parse Query Constraints'].json.constraints.category || null }}"
            }
          ]
        },
        "options": {}
      },
      "id": "9632a619-db01-49db-a74e-e1f2d454f2a8",
      "name": "Search Foods Database",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        48,
        80
      ],
      "credentials": {
        "supabaseApi": {
          "id": "nfXBRlqFWqcxGvSb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.message.content }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        768,
        80
      ],
      "id": "a5385004-db1f-4062-8bc5-fbd1b6be5b55",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { \"input\": $node['Parse Query Constraints'].json.constraints.query, \"model\": \"text-embedding-ada-002\" } }}",
        "options": {}
      },
      "id": "e0b51ec9-348f-4d5c-a8f9-068bb8ef7cd9",
      "name": "Generate Query Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -176,
        80
      ],
      "credentials": {
        "openAiApi": {
          "id": "BEoiMqHuaQ74fbxc",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format food results into context string\nconst query = $node['Parse Query Constraints'].json.constraints.query;\n\nconsole.log(\"=== Format Food Context Node ===\");\nconsole.log(\"Processing all input items:\", $input.all().length);\n\n// Get all items from the input\nconst allItems = $input.all();\nconst foods = allItems.map(item => item.json);\n\nconsole.log(\"Extracted foods count:\", foods.length);\n\n// No foods found\nif (!foods || foods.length === 0) {\n  console.log(\"No foods found, returning fallback.\");\n  return [\n    {\n      json: {\n        context: \"No matching foods found.\",\n        query: query,\n        foodCount: 0\n      }\n    }\n  ];\n}\n\n// Build context string\nlet contextParts = [];\nfor (let i = 0; i < foods.length; i++) {\n  const food = foods[i];\n  console.log(`Processing food[${i}] =`, food.name);\n  \n  const contextPart = `${i + 1}. ${food.name || 'Unknown'} (${food.category || 'Unknown'})\n   - Calories: ${food.calories_per_100g || 0} kcal per 100g\n   - Protein: ${food.protein_per_100g || 0} g\n   - Fat: ${food.fat_per_100g || 0} g\n   - Carbs: ${food.carbs_per_100g || 0} g\n   - Fiber: ${food.fiber_per_100g || 0} g\n   - Sugar: ${food.sugar_per_100g || 0} g\n   - Sodium: ${food.sodium_per_100g || 0} mg`;\n  \n  contextParts.push(contextPart);\n}\n\nconst context = contextParts.join('\\n\\n');\nconsole.log(\"Final formatted context:\\n\", context);\n\nreturn [\n  {\n    json: {\n      context: context,\n      query: query,\n      foodCount: foods.length\n    }\n  }\n];"
      },
      "id": "41135340-312a-4129-8087-fb4622144897",
      "name": "Format Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        80
      ]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4-turbo",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "You are a nutrition assistant. Answer the user's question about foods using the provided food data context. Keep your answer concise, clear, and to the point, ideally in 2â€“3 sentences or as a short bullet list."
            },
            {
              "content": "=Context: {{ $node['Format Context'].json.context }}\n\nUser Question: {{ $node['Parse Query Constraints'].json.constraints.query }}"
            }
          ]
        },
        "options": {},
        "requestOptions": {}
      },
      "id": "0d6c4e7a-e742-413d-acf5-bc5b514e8bef",
      "name": "Generate ChatGPT Response",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        496,
        80
      ],
      "alwaysOutputData": false,
      "credentials": {
        "openAiApi": {
          "id": "BEoiMqHuaQ74fbxc",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse constraints from user query\nconst query = $input.first().json.body.chatInput.toLowerCase();\nconst constraints = {\n  query: $input.first().json.body.chatInput\n};\n\n// Calorie constraints\nif (query.includes('under') && (query.includes('calorie') || query.includes('kcal'))) {\n  const match = query.match(/under\\s+(\\d+)/);\n  if (match) constraints.max_calories = parseFloat(match[1]);\n}\n\nif (query.includes('over') && (query.includes('calorie') || query.includes('kcal'))) {\n  const match = query.match(/over\\s+(\\d+)/);\n  if (match) constraints.min_calories = parseFloat(match[1]);\n}\n\n// Between calories\nif (query.includes('between') && (query.includes('calorie') || query.includes('kcal'))) {\n  const match = query.match(/between\\s+(\\d+)\\s*and\\s*(\\d+)/);\n  if (match) {\n    constraints.min_calories = parseFloat(match[1]);\n    constraints.max_calories = parseFloat(match[2]);\n  }\n}\n\n// Protein constraints\nif (query.includes('high protein')) {\n  constraints.min_protein = 15.0;\n}\nif (query.includes('low protein')) {\n  constraints.max_protein = 5.0;\n}\n\nreturn {\n  constraints: constraints\n};"
      },
      "id": "e51c0d17-c12c-4be2-ad8c-076a4ba3e97b",
      "name": "Parse Query Constraints",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        80
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "610fff57-c711-4319-80d0-a6535229cba4",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -640,
        80
      ],
      "id": "08cf2e1c-8f35-492a-a427-4af6740c3172",
      "name": "Webhook",
      "webhookId": "610fff57-c711-4319-80d0-a6535229cba4"
    }
  ],
  "connections": {
    "Search Foods Database": {
      "main": [
        [
          {
            "node": "Format Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Query Embedding": {
      "main": [
        [
          {
            "node": "Search Foods Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Context": {
      "main": [
        [
          {
            "node": "Generate ChatGPT Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate ChatGPT Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Query Constraints": {
      "main": [
        [
          {
            "node": "Generate Query Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Parse Query Constraints",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8681964fb90f8f0d87b6a41f57eba1166d71ed29b871053ff742d0a6e7dcd2f7"
  }
}